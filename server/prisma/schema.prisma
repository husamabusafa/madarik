// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ----------
/// Enums
/// ----------
enum Locale {
  EN
  AR
}

enum MemberRole {
  OWNER
  MEMBER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REVOKED
  EXPIRED
}

enum ListingStatus {
  DRAFT
  READY_TO_PUBLISH
  PUBLISHED
  ARCHIVED
}

enum ListingType {
  SALE
  RENT
}

enum PropertyType {
  HOUSE
  APARTMENT
  LAND
  COMMERCIAL
  VILLA
  TOWNHOUSE
  OFFICE
  RETAIL
  INDUSTRIAL
  OTHER
}

enum AreaUnit {
  SQM
  SQFT
}

enum MediaType {
  PHOTO
  VIDEO
}

/// ----------
/// Models
/// ----------

model User {
  id                 String                 @id @default(cuid())
  email              String                 @unique
  passwordHash       String
  emailVerifiedAt    DateTime?
  preferredLocale    Locale                 @default(EN)
  createdAt          DateTime               @default(now())
  lastLoginAt        DateTime?

  companiesOwned     Company[]              @relation("CompanyOwner")
  companyMemberships CompanyMember[]
  invitesSent        CompanyInvite[]        @relation("CompanyInviteInviter")
  invitesAccepted    CompanyInvite[]        @relation("CompanyInviteAcceptedUser")
  listingStatusLogs  ListingStatusLog[]     @relation("ListingStatusActor")

  emailVerifyTokens   EmailVerificationToken[]
  passwordResetTokens PasswordResetToken[]
  favorites           Favorite[]

  @@index([createdAt])
}

model Company {
  id          String      @id @default(cuid())
  ownerUserId String
  owner       User        @relation("CompanyOwner", fields: [ownerUserId], references: [id], onDelete: Restrict)

  name        String
  slug        String      @unique
  logoUrl     String?
  country     String
  city        String
  publicEmail String?
  publicPhone String?
  website     String?
  isActive    Boolean     @default(true)

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  members     CompanyMember[]
  invites     CompanyInvite[]
  listings    Listing[]
  leads       Lead[]

  @@index([ownerUserId])
  @@index([country, city])
}

model CompanyMember {
  companyId String
  userId    String
  role      MemberRole @default(MEMBER)
  addedAt   DateTime   @default(now())

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([companyId, userId])
  @@index([userId])
  @@index([companyId, role])
}

model CompanyInvite {
  id             String       @id @default(cuid())
  companyId      String
  email          String
  inviterUserId  String
  status         InviteStatus @default(PENDING)
  token          String       @unique
  expiresAt      DateTime
  createdAt      DateTime     @default(now())

  acceptedAt     DateTime?
  acceptedUserId String?

  company        Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  inviter        User         @relation("CompanyInviteInviter", fields: [inviterUserId], references: [id])
  acceptedUser   User?        @relation("CompanyInviteAcceptedUser", fields: [acceptedUserId], references: [id])

  @@index([companyId])
  @@index([email, companyId])
  @@index([status, expiresAt])
}

model Listing {
  id              String         @id @default(cuid())
  companyId       String
  status          ListingStatus  @default(DRAFT)

  // Moved title/description/slug into ListingTranslation (per-locale)

  propertyType    PropertyType
  listingType     ListingType

  price           Decimal?       @db.Decimal(12, 2)
  currency        String?        @db.VarChar(3)

  areaValue       Decimal?       @db.Decimal(10, 2)
  areaUnit        AreaUnit?

  bedrooms        Int?
  bathrooms       Int?
  parking         Int?
  yearBuilt       Int?

  // Canonical geocode fields (language-neutral)
  addressLine     String         // canonical line from geocoder (e.g., English romaji/translit)
  city            String
  areaCode        String?        // optional code/id for neighborhood
  country         String

  lat             Decimal        @db.Decimal(9, 6)
  lng             Decimal        @db.Decimal(9, 6)
  zoomHint        Int?

  primaryPhotoUrl String?

  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  media           MediaAsset[]
  amenities       ListingAmenity[]
  leads           Lead[]
  favorites       Favorite[]
  statusLogs      ListingStatusLog[]
  metrics         ListingMetrics?
  translations    ListingTranslation[]

  @@index([companyId, status])
  @@index([status, publishedAt])
  @@index([city])
  @@index([country, city])
  @@index([lat, lng])
}

/// Per-locale content for listings (AR/EN)
model ListingTranslation {
  id          String   @id @default(cuid())
  listingId   String
  locale      Locale

  title       String
  description String

  // Human-friendly, localized display fields (optional)
  displayAddressLine String?  // e.g., Arabic address rendering
  areaName           String?  // neighborhood/locality name shown to the user

  // SEO
  slug        String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, locale])      // one translation per locale per listing
  @@unique([locale, slug])           // pretty URLs unique within a locale
  @@index([listingId])
  @@index([locale])
}

/// Amenity taxonomy with bilingual labels (seed once)
model Amenity {
  id        String   @id @default(cuid())
  key       String   @unique  // stable key, e.g., "balcony"
  labelEn   String
  labelAr   String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings  ListingAmenity[]
}

model ListingAmenity {
  listingId String
  amenityId String

  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Restrict)

  @@id([listingId, amenityId])
  @@index([amenityId])
}

model MediaAsset {
  id         String     @id @default(cuid())
  listingId  String
  type       MediaType  @default(PHOTO)
  url        String
  sortOrder  Int        @default(0)
  createdAt  DateTime   @default(now())

  listing    Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId, sortOrder])
}

model Lead {
  id         String   @id @default(cuid())
  listingId  String
  companyId  String
  name       String
  email      String
  phone      String?
  message    String?
  consent    Boolean  @default(false)
  source     String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  listing    Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([companyId, createdAt])
}

model Favorite {
  userId    String
  listingId String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([userId, listingId])
  @@index([listingId])
}

model ListingStatusLog {
  id          String        @id @default(cuid())
  listingId   String
  fromStatus  ListingStatus?
  toStatus    ListingStatus
  actorUserId String?
  reason      String?
  createdAt   DateTime      @default(now())

  listing     Listing       @relation(fields: [listingId], references: [id], onDelete: Cascade)
  actor       User?         @relation("ListingStatusActor", fields: [actorUserId], references: [id])

  @@index([listingId, createdAt])
}

model ListingMetrics {
  listingId    String  @id
  viewCount    Int     @default(0)
  leadsCount   Int     @default(0)
  lastViewedAt DateTime?

  listing      Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}