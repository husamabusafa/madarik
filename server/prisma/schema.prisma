// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ----------
/// Enums
/// ----------
enum Locale {
  EN
  AR
}

enum UserRole {
  ADMIN
  MANAGER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REVOKED
  EXPIRED
}

enum ListingStatus {
  DRAFT
  READY_TO_PUBLISH
  PUBLISHED
  ARCHIVED
}

enum ListingType {
  SALE
  RENT
}

enum PropertyType {
  HOUSE
  APARTMENT
  LAND
  COMMERCIAL
  VILLA
  TOWNHOUSE
  OFFICE
  RETAIL
  INDUSTRIAL
  OTHER
}

enum AreaUnit {
  SQM
  SQFT
}

enum MediaType {
  PHOTO
  VIDEO
}

/// ----------
/// Models
/// ----------

/// Internal user (staff only). No public signup.
/// Seed at least one ADMIN directly in DB; afterwards ADMINs invite MANAGERs/ADMINs.
model User {
  id               String                 @id @default(cuid())
  email            String                 @unique
  passwordHash     String
  emailVerifiedAt  DateTime?
  preferredLocale  Locale                 @default(EN)
  role             UserRole               @default(MANAGER)
  isActive         Boolean                @default(true)
  createdAt        DateTime               @default(now())
  lastLoginAt      DateTime?

  // Relations
  invitesSent        UserInvite[]         @relation("UserInviteInviter")
  invitesAccepted    UserInvite[]         @relation("UserInviteAcceptedUser")
  listingStatusLogs  ListingStatusLog[]   @relation("ListingStatusActor")
  assignedLeads      Lead[]               @relation("LeadAssignee")
  createdListings    Listing[]            @relation("ListingCreator")
  editedListings     Listing[]            @relation("ListingEditor")

  // Tokens
  emailVerifyTokens   EmailVerificationToken[]
  passwordResetTokens PasswordResetToken[]

  @@index([role, isActive])
  @@index([createdAt])
}

/// Admin-configurable basic site/company profile (only one row used in practice).
model SiteSetting {
  id          String   @id @default(cuid())
  siteNameEn  String
  siteNameAr  String
  logoUrl     String?
  publicEmail String?
  publicPhone String?
  website     String?
  country     String?
  city        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Invitation to create an internal account (staff).
model UserInvite {
  id             String      @id @default(cuid())
  email          String
  invitedRole    UserRole    @default(MANAGER)
  inviterUserId  String
  status         InviteStatus @default(PENDING)
  token          String      @unique
  expiresAt      DateTime
  createdAt      DateTime    @default(now())

  acceptedAt     DateTime?
  acceptedUserId String?

  inviter        User        @relation("UserInviteInviter", fields: [inviterUserId], references: [id])
  acceptedUser   User?       @relation("UserInviteAcceptedUser", fields: [acceptedUserId], references: [id])

  @@index([email, status])
  @@index([status, expiresAt])
}

/// A real estate listing (belongs to the single company/site).
model Listing {
  id              String         @id @default(cuid())
  status          ListingStatus  @default(DRAFT)

  propertyType    PropertyType
  listingType     ListingType

  price           Decimal?       @db.Decimal(12, 2)
  currency        String?        @db.VarChar(3)

  areaValue       Decimal?       @db.Decimal(10, 2)
  areaUnit        AreaUnit?

  bedrooms        Int?
  bathrooms       Int?
  parking         Int?
  yearBuilt       Int?

  // Canonical geocode fields (language-neutral)
  addressLine     String
  city            String
  areaCode        String?
  country         String

  // Coordinates (consider switching to PostGIS later)
  lat             Decimal        @db.Decimal(9, 6)
  lng             Decimal        @db.Decimal(9, 6)
  zoomHint        Int?

  primaryPhotoUrl String?

  publishedAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Optional authorship
  createdByUserId    String?
  lastEditedByUserId String?

  createdBy       User?          @relation("ListingCreator", fields: [createdByUserId], references: [id])
  lastEditedBy    User?          @relation("ListingEditor", fields: [lastEditedByUserId], references: [id])

  translations    ListingTranslation[]
  media           MediaAsset[]
  amenities       ListingAmenity[]
  leads           Lead[]
  statusLogs      ListingStatusLog[]
  metrics         ListingMetrics?

  @@index([status, publishedAt])
  @@index([city])
  @@index([country, city])
  @@index([lat, lng])
}

/// Per-locale content for listings (AR/EN).
model ListingTranslation {
  id                  String   @id @default(cuid())
  listingId           String
  locale              Locale

  title               String
  description         String

  // Localized display-only fields
  displayAddressLine  String?
  areaName            String?

  // SEO: locale-scoped slug
  slug                String

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  listing             Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([listingId, locale])  // exactly one translation per locale
  @@unique([locale, slug])       // pretty URLs per locale
  @@index([listingId])
  @@index([locale])
}

/// Amenity taxonomy with bilingual labels (seed once).
model Amenity {
  id        String   @id @default(cuid())
  key       String   @unique   // stable key, e.g., "balcony"
  labelEn   String
  labelAr   String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings  ListingAmenity[]
}

/// Many-to-many join: Listing â†” Amenity
model ListingAmenity {
  listingId String
  amenityId String

  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Restrict)

  @@id([listingId, amenityId])
  @@index([amenityId])
}

/// Media assets for a listing.
model MediaAsset {
  id         String     @id @default(cuid())
  listingId  String
  type       MediaType  @default(PHOTO)
  url        String
  sortOrder  Int        @default(0)
  createdAt  DateTime   @default(now())

  listing    Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId, sortOrder])
}

/// Buyer inquiry for a listing (visible to all staff; can be assigned).
model Lead {
  id             String    @id @default(cuid())
  listingId      String
  name           String
  email          String
  phone          String?
  message        String?
  consent        Boolean   @default(false)
  source         String?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime  @default(now())

  assignedToUserId String?
  assignedTo     User?     @relation("LeadAssignee", fields: [assignedToUserId], references: [id])

  listing       Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId])
  @@index([createdAt])
  @@index([assignedToUserId])
}

/// Status change history (audit).
model ListingStatusLog {
  id          String         @id @default(cuid())
  listingId   String
  fromStatus  ListingStatus?
  toStatus    ListingStatus
  actorUserId String?
  reason      String?
  createdAt   DateTime       @default(now())

  listing     Listing        @relation(fields: [listingId], references: [id], onDelete: Cascade)
  actor       User?          @relation("ListingStatusActor", fields: [actorUserId], references: [id])

  @@index([listingId, createdAt])
}

/// Lightweight counters per listing.
model ListingMetrics {
  listingId    String  @id
  viewCount    Int     @default(0)
  leadsCount   Int     @default(0)
  lastViewedAt DateTime?

  listing      Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

/// Email verification tokens (invite acceptance).
model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

/// Password reset tokens.
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}