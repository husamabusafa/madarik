
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  emailVerifiedAt: 'emailVerifiedAt',
  preferredLocale: 'preferredLocale',
  createdAt: 'createdAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  ownerUserId: 'ownerUserId',
  name: 'name',
  slug: 'slug',
  logoUrl: 'logoUrl',
  country: 'country',
  city: 'city',
  publicEmail: 'publicEmail',
  publicPhone: 'publicPhone',
  website: 'website',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyMemberScalarFieldEnum = {
  companyId: 'companyId',
  userId: 'userId',
  role: 'role',
  addedAt: 'addedAt'
};

exports.Prisma.CompanyInviteScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  email: 'email',
  inviterUserId: 'inviterUserId',
  status: 'status',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  acceptedAt: 'acceptedAt',
  acceptedUserId: 'acceptedUserId'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  status: 'status',
  propertyType: 'propertyType',
  listingType: 'listingType',
  price: 'price',
  currency: 'currency',
  areaValue: 'areaValue',
  areaUnit: 'areaUnit',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  parking: 'parking',
  yearBuilt: 'yearBuilt',
  addressLine: 'addressLine',
  city: 'city',
  areaCode: 'areaCode',
  country: 'country',
  lat: 'lat',
  lng: 'lng',
  zoomHint: 'zoomHint',
  primaryPhotoUrl: 'primaryPhotoUrl',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ListingTranslationScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  locale: 'locale',
  title: 'title',
  description: 'description',
  displayAddressLine: 'displayAddressLine',
  areaName: 'areaName',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AmenityScalarFieldEnum = {
  id: 'id',
  key: 'key',
  labelEn: 'labelEn',
  labelAr: 'labelAr',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ListingAmenityScalarFieldEnum = {
  listingId: 'listingId',
  amenityId: 'amenityId'
};

exports.Prisma.MediaAssetScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  type: 'type',
  url: 'url',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  companyId: 'companyId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  consent: 'consent',
  source: 'source',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  userId: 'userId',
  listingId: 'listingId',
  createdAt: 'createdAt'
};

exports.Prisma.ListingStatusLogScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  fromStatus: 'fromStatus',
  toStatus: 'toStatus',
  actorUserId: 'actorUserId',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.ListingMetricsScalarFieldEnum = {
  listingId: 'listingId',
  viewCount: 'viewCount',
  leadsCount: 'leadsCount',
  lastViewedAt: 'lastViewedAt'
};

exports.Prisma.EmailVerificationTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  usedAt: 'usedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Locale = exports.$Enums.Locale = {
  EN: 'EN',
  AR: 'AR'
};

exports.MemberRole = exports.$Enums.MemberRole = {
  OWNER: 'OWNER',
  MEMBER: 'MEMBER'
};

exports.InviteStatus = exports.$Enums.InviteStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REVOKED: 'REVOKED',
  EXPIRED: 'EXPIRED'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  DRAFT: 'DRAFT',
  READY_TO_PUBLISH: 'READY_TO_PUBLISH',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  HOUSE: 'HOUSE',
  APARTMENT: 'APARTMENT',
  LAND: 'LAND',
  COMMERCIAL: 'COMMERCIAL',
  VILLA: 'VILLA',
  TOWNHOUSE: 'TOWNHOUSE',
  OFFICE: 'OFFICE',
  RETAIL: 'RETAIL',
  INDUSTRIAL: 'INDUSTRIAL',
  OTHER: 'OTHER'
};

exports.ListingType = exports.$Enums.ListingType = {
  SALE: 'SALE',
  RENT: 'RENT'
};

exports.AreaUnit = exports.$Enums.AreaUnit = {
  SQM: 'SQM',
  SQFT: 'SQFT'
};

exports.MediaType = exports.$Enums.MediaType = {
  PHOTO: 'PHOTO',
  VIDEO: 'VIDEO'
};

exports.Prisma.ModelName = {
  User: 'User',
  Company: 'Company',
  CompanyMember: 'CompanyMember',
  CompanyInvite: 'CompanyInvite',
  Listing: 'Listing',
  ListingTranslation: 'ListingTranslation',
  Amenity: 'Amenity',
  ListingAmenity: 'ListingAmenity',
  MediaAsset: 'MediaAsset',
  Lead: 'Lead',
  Favorite: 'Favorite',
  ListingStatusLog: 'ListingStatusLog',
  ListingMetrics: 'ListingMetrics',
  EmailVerificationToken: 'EmailVerificationToken',
  PasswordResetToken: 'PasswordResetToken'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
